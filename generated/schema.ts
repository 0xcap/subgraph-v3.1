// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderId(): BigInt {
    let value = this.get("orderId");
    return value!.toBigInt();
  }

  set orderId(value: BigInt) {
    this.set("orderId", Value.fromBigInt(value));
  }

  get txHash(): string {
    let value = this.get("txHash");
    return value!.toString();
  }

  set txHash(value: string) {
    this.set("txHash", Value.fromString(value));
  }

  get orderType(): i32 {
    let value = this.get("orderType");
    return value!.toI32();
  }

  set orderType(value: i32) {
    this.set("orderType", Value.fromI32(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get market(): string {
    let value = this.get("market");
    return value!.toString();
  }

  set market(value: string) {
    this.set("market", Value.fromString(value));
  }

  get isLong(): boolean {
    let value = this.get("isLong");
    return value!.toBoolean();
  }

  set isLong(value: boolean) {
    this.set("isLong", Value.fromBoolean(value));
  }

  get size(): BigInt {
    let value = this.get("size");
    return value!.toBigInt();
  }

  set size(value: BigInt) {
    this.set("size", Value.fromBigInt(value));
  }

  get margin(): BigInt | null {
    let value = this.get("margin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set margin(value: BigInt | null) {
    if (!value) {
      this.unset("margin");
    } else {
      this.set("margin", Value.fromBigInt(<BigInt>value));
    }
  }

  get leverage(): BigInt | null {
    let value = this.get("leverage");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set leverage(value: BigInt | null) {
    if (!value) {
      this.unset("leverage");
    } else {
      this.set("leverage", Value.fromBigInt(<BigInt>value));
    }
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get pnl(): BigInt | null {
    let value = this.get("pnl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set pnl(value: BigInt | null) {
    if (!value) {
      this.unset("pnl");
    } else {
      this.set("pnl", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt {
    let value = this.get("fee");
    return value!.toBigInt();
  }

  set fee(value: BigInt) {
    this.set("fee", Value.fromBigInt(value));
  }

  get liquidationPrice(): BigInt | null {
    let value = this.get("liquidationPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidationPrice(value: BigInt | null) {
    if (!value) {
      this.unset("liquidationPrice");
    } else {
      this.set("liquidationPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get liquidatorFee(): BigInt | null {
    let value = this.get("liquidatorFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidatorFee(value: BigInt | null) {
    if (!value) {
      this.unset("liquidatorFee");
    } else {
      this.set("liquidatorFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get keeperFee(): BigInt | null {
    let value = this.get("keeperFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set keeperFee(value: BigInt | null) {
    if (!value) {
      this.unset("keeperFee");
    } else {
      this.set("keeperFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get fundingFee(): BigInt | null {
    let value = this.get("fundingFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fundingFee(value: BigInt | null) {
    if (!value) {
      this.unset("fundingFee");
    } else {
      this.set("fundingFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get status(): string | null {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set status(value: string | null) {
    if (!value) {
      this.unset("status");
    } else {
      this.set("status", Value.fromString(<string>value));
    }
  }

  get isReduceOnly(): boolean {
    let value = this.get("isReduceOnly");
    return value!.toBoolean();
  }

  set isReduceOnly(value: boolean) {
    this.set("isReduceOnly", Value.fromBoolean(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }
}
