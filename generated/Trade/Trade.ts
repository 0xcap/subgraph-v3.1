// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingUpdated extends ethereum.Event {
  get params(): FundingUpdated__Params {
    return new FundingUpdated__Params(this);
  }
}

export class FundingUpdated__Params {
  _event: FundingUpdated;

  constructor(event: FundingUpdated) {
    this._event = event;
  }

  get market(): string {
    return this._event.parameters[0].value.toString();
  }

  get fundingTracker(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get fundingIncrement(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OrderCancelled extends ethereum.Event {
  get params(): OrderCancelled__Params {
    return new OrderCancelled__Params(this);
  }
}

export class OrderCancelled__Params {
  _event: OrderCancelled;

  constructor(event: OrderCancelled) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get market(): string {
    return this._event.parameters[2].value.toString();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get margin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get orderType(): i32 {
    return this._event.parameters[8].value.toI32();
  }

  get isReduceOnly(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }
}

export class PositionDecreased extends ethereum.Event {
  get params(): PositionDecreased__Params {
    return new PositionDecreased__Params(this);
  }
}

export class PositionDecreased__Params {
  _event: PositionDecreased;

  constructor(event: PositionDecreased) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get market(): string {
    return this._event.parameters[2].value.toString();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get positionMargin(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get positionSize(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get positionPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get fundingTracker(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get keeperFee(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }

  get pnl(): BigInt {
    return this._event.parameters[13].value.toBigInt();
  }

  get fundingFee(): BigInt {
    return this._event.parameters[14].value.toBigInt();
  }
}

export class PositionIncreased extends ethereum.Event {
  get params(): PositionIncreased__Params {
    return new PositionIncreased__Params(this);
  }
}

export class PositionIncreased__Params {
  _event: PositionIncreased;

  constructor(event: PositionIncreased) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get market(): string {
    return this._event.parameters[2].value.toString();
  }

  get isLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get size(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get positionMargin(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get positionSize(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get positionPrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get fundingTracker(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get keeperFee(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get market(): string {
    return this._event.parameters[1].value.toString();
  }

  get isLong(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get size(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidatorFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Trade__getMarketsWithPricesResult_marketsStruct extends ethereum.Tuple {
  get symbol(): string {
    return this[0].toString();
  }

  get feed(): Address {
    return this[1].toAddress();
  }

  get maxLeverage(): BigInt {
    return this[2].toBigInt();
  }

  get maxOI(): BigInt {
    return this[3].toBigInt();
  }

  get fee(): BigInt {
    return this[4].toBigInt();
  }

  get fundingFactor(): BigInt {
    return this[5].toBigInt();
  }

  get minSize(): BigInt {
    return this[6].toBigInt();
  }

  get minSettlementTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Trade__getMarketsWithPricesResult {
  value0: Array<Trade__getMarketsWithPricesResult_marketsStruct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<Trade__getMarketsWithPricesResult_marketsStruct>,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  get_markets(): Array<Trade__getMarketsWithPricesResult_marketsStruct> {
    return this.value0;
  }

  get_prices(): Array<BigInt> {
    return this.value1;
  }
}

export class Trade__getUserPositionsWithUplsResult_positionsStruct extends ethereum.Tuple {
  get user(): Address {
    return this[0].toAddress();
  }

  get market(): string {
    return this[1].toString();
  }

  get isLong(): boolean {
    return this[2].toBoolean();
  }

  get size(): BigInt {
    return this[3].toBigInt();
  }

  get margin(): BigInt {
    return this[4].toBigInt();
  }

  get fundingTracker(): BigInt {
    return this[5].toBigInt();
  }

  get price(): BigInt {
    return this[6].toBigInt();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }
}

export class Trade__getUserPositionsWithUplsResult {
  value0: Array<Trade__getUserPositionsWithUplsResult_positionsStruct>;
  value1: Array<BigInt>;

  constructor(
    value0: Array<Trade__getUserPositionsWithUplsResult_positionsStruct>,
    value1: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }

  get_positions(): Array<
    Trade__getUserPositionsWithUplsResult_positionsStruct
  > {
    return this.value0;
  }

  get_upls(): Array<BigInt> {
    return this.value1;
  }
}

export class Trade extends ethereum.SmartContract {
  static bind(address: Address): Trade {
    return new Trade("Trade", address);
  }

  BPS_DIVIDER(): BigInt {
    let result = super.call("BPS_DIVIDER", "BPS_DIVIDER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BPS_DIVIDER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BPS_DIVIDER", "BPS_DIVIDER():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNIT(): BigInt {
    let result = super.call("UNIT", "UNIT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_UNIT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNIT", "UNIT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  chainlink(): Address {
    let result = super.call("chainlink", "chainlink():(address)", []);

    return result[0].toAddress();
  }

  try_chainlink(): ethereum.CallResult<Address> {
    let result = super.tryCall("chainlink", "chainlink():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccruedFunding(market: string, intervals: BigInt): BigInt {
    let result = super.call(
      "getAccruedFunding",
      "getAccruedFunding(string,uint256):(int256)",
      [
        ethereum.Value.fromString(market),
        ethereum.Value.fromUnsignedBigInt(intervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_getAccruedFunding(
    market: string,
    intervals: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccruedFunding",
      "getAccruedFunding(string,uint256):(int256)",
      [
        ethereum.Value.fromString(market),
        ethereum.Value.fromUnsignedBigInt(intervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExecutableOrderIds(): Array<BigInt> {
    let result = super.call(
      "getExecutableOrderIds",
      "getExecutableOrderIds():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getExecutableOrderIds(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExecutableOrderIds",
      "getExecutableOrderIds():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getLiquidatableUsers(): Array<Address> {
    let result = super.call(
      "getLiquidatableUsers",
      "getLiquidatableUsers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getLiquidatableUsers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getLiquidatableUsers",
      "getLiquidatableUsers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getMarketsWithPrices(): Trade__getMarketsWithPricesResult {
    let result = super.call(
      "getMarketsWithPrices",
      "getMarketsWithPrices():((string,address,uint256,uint256,uint256,uint256,uint256,uint256)[],uint256[])",
      []
    );

    return new Trade__getMarketsWithPricesResult(
      result[0].toTupleArray<Trade__getMarketsWithPricesResult_marketsStruct>(),
      result[1].toBigIntArray()
    );
  }

  try_getMarketsWithPrices(): ethereum.CallResult<
    Trade__getMarketsWithPricesResult
  > {
    let result = super.tryCall(
      "getMarketsWithPrices",
      "getMarketsWithPrices():((string,address,uint256,uint256,uint256,uint256,uint256,uint256)[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Trade__getMarketsWithPricesResult(
        value[0].toTupleArray<
          Trade__getMarketsWithPricesResult_marketsStruct
        >(),
        value[1].toBigIntArray()
      )
    );
  }

  getUpl(user: Address): BigInt {
    let result = super.call("getUpl", "getUpl(address):(int256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getUpl(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getUpl", "getUpl(address):(int256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserPositionsWithUpls(
    user: Address
  ): Trade__getUserPositionsWithUplsResult {
    let result = super.call(
      "getUserPositionsWithUpls",
      "getUserPositionsWithUpls(address):((address,string,bool,uint256,uint256,int256,uint256,uint256)[],int256[])",
      [ethereum.Value.fromAddress(user)]
    );

    return new Trade__getUserPositionsWithUplsResult(
      result[0].toTupleArray<
        Trade__getUserPositionsWithUplsResult_positionsStruct
      >(),
      result[1].toBigIntArray()
    );
  }

  try_getUserPositionsWithUpls(
    user: Address
  ): ethereum.CallResult<Trade__getUserPositionsWithUplsResult> {
    let result = super.tryCall(
      "getUserPositionsWithUpls",
      "getUserPositionsWithUpls(address):((address,string,bool,uint256,uint256,int256,uint256,uint256)[],int256[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Trade__getUserPositionsWithUplsResult(
        value[0].toTupleArray<
          Trade__getUserPositionsWithUplsResult_positionsStruct
        >(),
        value[1].toBigIntArray()
      )
    );
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pool(): Address {
    let result = super.call("pool", "pool():(address)", []);

    return result[0].toAddress();
  }

  try_pool(): ethereum.CallResult<Address> {
    let result = super.tryCall("pool", "pool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  store(): Address {
    let result = super.call("store", "store():(address)", []);

    return result[0].toAddress();
  }

  try_store(): ethereum.CallResult<Address> {
    let result = super.tryCall("store", "store():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class CancelOrdersCall extends ethereum.Call {
  get inputs(): CancelOrdersCall__Inputs {
    return new CancelOrdersCall__Inputs(this);
  }

  get outputs(): CancelOrdersCall__Outputs {
    return new CancelOrdersCall__Outputs(this);
  }
}

export class CancelOrdersCall__Inputs {
  _call: CancelOrdersCall;

  constructor(call: CancelOrdersCall) {
    this._call = call;
  }

  get orderIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CancelOrdersCall__Outputs {
  _call: CancelOrdersCall;

  constructor(call: CancelOrdersCall) {
    this._call = call;
  }
}

export class ClosePositionWithoutProfitCall extends ethereum.Call {
  get inputs(): ClosePositionWithoutProfitCall__Inputs {
    return new ClosePositionWithoutProfitCall__Inputs(this);
  }

  get outputs(): ClosePositionWithoutProfitCall__Outputs {
    return new ClosePositionWithoutProfitCall__Outputs(this);
  }
}

export class ClosePositionWithoutProfitCall__Inputs {
  _call: ClosePositionWithoutProfitCall;

  constructor(call: ClosePositionWithoutProfitCall) {
    this._call = call;
  }

  get _market(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ClosePositionWithoutProfitCall__Outputs {
  _call: ClosePositionWithoutProfitCall;

  constructor(call: ClosePositionWithoutProfitCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ExecuteOrdersCall extends ethereum.Call {
  get inputs(): ExecuteOrdersCall__Inputs {
    return new ExecuteOrdersCall__Inputs(this);
  }

  get outputs(): ExecuteOrdersCall__Outputs {
    return new ExecuteOrdersCall__Outputs(this);
  }
}

export class ExecuteOrdersCall__Inputs {
  _call: ExecuteOrdersCall;

  constructor(call: ExecuteOrdersCall) {
    this._call = call;
  }
}

export class ExecuteOrdersCall__Outputs {
  _call: ExecuteOrdersCall;

  constructor(call: ExecuteOrdersCall) {
    this._call = call;
  }
}

export class LinkCall extends ethereum.Call {
  get inputs(): LinkCall__Inputs {
    return new LinkCall__Inputs(this);
  }

  get outputs(): LinkCall__Outputs {
    return new LinkCall__Outputs(this);
  }
}

export class LinkCall__Inputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }

  get _chainlink(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _store(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class LinkCall__Outputs {
  _call: LinkCall;

  constructor(call: LinkCall) {
    this._call = call;
  }
}

export class LiquidateUsersCall extends ethereum.Call {
  get inputs(): LiquidateUsersCall__Inputs {
    return new LiquidateUsersCall__Inputs(this);
  }

  get outputs(): LiquidateUsersCall__Outputs {
    return new LiquidateUsersCall__Outputs(this);
  }
}

export class LiquidateUsersCall__Inputs {
  _call: LiquidateUsersCall;

  constructor(call: LiquidateUsersCall) {
    this._call = call;
  }
}

export class LiquidateUsersCall__Outputs {
  _call: LiquidateUsersCall;

  constructor(call: LiquidateUsersCall) {
    this._call = call;
  }
}

export class SubmitOrderCall extends ethereum.Call {
  get inputs(): SubmitOrderCall__Inputs {
    return new SubmitOrderCall__Inputs(this);
  }

  get outputs(): SubmitOrderCall__Outputs {
    return new SubmitOrderCall__Outputs(this);
  }
}

export class SubmitOrderCall__Inputs {
  _call: SubmitOrderCall;

  constructor(call: SubmitOrderCall) {
    this._call = call;
  }

  get params(): SubmitOrderCallParamsStruct {
    return changetype<SubmitOrderCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get tpPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get slPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SubmitOrderCall__Outputs {
  _call: SubmitOrderCall;

  constructor(call: SubmitOrderCall) {
    this._call = call;
  }
}

export class SubmitOrderCallParamsStruct extends ethereum.Tuple {
  get orderId(): BigInt {
    return this[0].toBigInt();
  }

  get user(): Address {
    return this[1].toAddress();
  }

  get market(): string {
    return this[2].toString();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get isLong(): boolean {
    return this[4].toBoolean();
  }

  get isReduceOnly(): boolean {
    return this[5].toBoolean();
  }

  get orderType(): i32 {
    return this[6].toI32();
  }

  get margin(): BigInt {
    return this[7].toBigInt();
  }

  get size(): BigInt {
    return this[8].toBigInt();
  }

  get fee(): BigInt {
    return this[9].toBigInt();
  }

  get timestamp(): BigInt {
    return this[10].toBigInt();
  }
}

export class UpdateOrderCall extends ethereum.Call {
  get inputs(): UpdateOrderCall__Inputs {
    return new UpdateOrderCall__Inputs(this);
  }

  get outputs(): UpdateOrderCall__Outputs {
    return new UpdateOrderCall__Outputs(this);
  }
}

export class UpdateOrderCall__Inputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }

  get orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateOrderCall__Outputs {
  _call: UpdateOrderCall;

  constructor(call: UpdateOrderCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
